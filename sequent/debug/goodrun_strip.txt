[ MainProcess ][ INFO    ][ Process PID: 3078; no run_id:. ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ DBAPI: DbMode write: creating schema. ][ dbapi.open ]
[ MainProcess ][ DEBUG   ][ DBAPI: Not in shared_db mode: removing database file: /var/acrisel/sand/sequent/sequent/sequent/examples/example00.db ][ dbapi.create_schema ]
[ MainProcess ][ DEBUG   ][ [ Step  ] Creating flow (trigger: True) ][ step.create_flow ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_start') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_success') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_end') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Adding triggers: StepStatus.success > Event('s1_success') ][ step.get_require_step_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s2_start', ((s1_success))) ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s2_complete') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ [ Step  ] Starter and enders events
    Starter: {'s1': Event('s1_start')}
    Ender:{'s2': Event('s2_complete')} ][ step.__create_eventor_events ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Creating Eventor steps
    Ender:{'s2': Step( path(s2), step({}),)}
    Triggers: {<StepStatus.success: 5>: (Event('s1_success'),), <StepStatus.failure: 6>: (Event('s1_end'),)} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_end'), Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ [ step s1 ] Container initialization
    iter_triggers: ()
    end_triggers: {<StepStatus.success: 5>: (Event('s1_end'),), <StepStatus.failure: 6>: (Event('s1_end'),)}
    repeat: range(0, 2) ][ step.__init__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Set container ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s1_start), func( Container(initial=True) ), triggers({})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_start'), Step( name(s1_start), func( Container(initial=True) ), triggers({}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ [ Step s2 ] Creating Eventor steps
    Ender:{'s2': Step( path(s2), step({}),)}
    Triggers: {} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s2_start', ((s1_success))), Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ [ Step  ] Starter events: [Event('s1_start')] ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ [ Step  ] Triggering event Event('s1_start') ][ step.create_flow ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Step  ] Flow: Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),) ][ step.create_flow ]
[ MainProcess ][ DEBUG   ][ Starting loop session ][ engine.loop_session ]
[ MainProcess ][ DEBUG   ][ Starting loop cycle ][ engine.loop_cycle ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1]: Step( name(s1_start), func( Container(initial=True) ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_start'/1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_start), func( Container(initial=True) ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 1 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 1(s1_start) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 1(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_start'/1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] Going to construct (invoke) and run task:
    Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ INFO    ][ [ Step s1_start/1 ] Attempting to run ]
[ MainProcess ][ DEBUG   ][ [ Step s1_start/1 ] Starting: Step( name(s1_start), func( Container(initial=True) ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_start/1 ] running Container(initial=True, eventor_task_sequence='1') ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Creating flow (trigger: False) ][ step.create_flow ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_s11_start') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_s12_start') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_s12_complete') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_s11_complete') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Starter and enders events
    Starter: {'s1_s11': Event('s1_s11_start'), 's1_s12': Event('s1_s12_start')}
    Ender:{'s1_s12': Event('s1_s12_complete'), 's1_s11': Event('s1_s11_complete')} ][ step.__create_eventor_events ]
[ MainProcess ][ DEBUG   ][ [ Step s1_s11 ] Creating Eventor steps
    Ender:{'s1_s12': Step( path(s1_s12), step({}),), 's1_s11': Step( path(s1_s11), step({}),)}
    Triggers: {} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_event: Event('s1_next') ][ engine.add_event ]
[ MainProcess ][ DEBUG   ][ [ Step s1_s11 ] Add ender trigger: {<StepStatus.complete: 7>: (Event('s1_next'),)} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_next'), Step( name(s1_next), func( Container(initial=False) ), triggers({}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_s11_start'), Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ [ Step s1_s12 ] Creating Eventor steps
    Ender:{'s1_s12': Step( path(s1_s12), step({}),), 's1_s11': Step( path(s1_s11), step({}),)}
    Triggers: {} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_step: already found in memory: skipping Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ [ Step s1_s12 ] Add ender trigger: {<StepStatus.complete: 7>: (Event('s1_next'),)} ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_next'), Step( name(s1_next), func( Container(initial=False) ), triggers({}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ add_step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.add_step ]
[ MainProcess ][ DEBUG   ][ add_assoc: Assoc(Event('s1_s12_start'), Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]}))) ][ engine.add_assoc ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Starter events: [Event('s1_s11_start'), Event('s1_s12_start')] ][ step.__create_eventor_steps ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Flow: Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),) ][ step.create_flow ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Setting sequence: 1 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1/1 ] Trying to get next sequence ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Received NextIteration: 0  ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Triggering starter Event('s1_s11_start')/1 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Triggering starter Event('s1_s12_start')/1 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_start/1 ] Completed: Step( name(s1_start), func( Container(initial=True, eventor_task_sequence='1') ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ INFO    ][ [ Step s1_start/1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] applying result, process: <eventor.eventor_types.Invoke object at 0x10605c780>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] applying task update to db
    Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=1, run_id='', step_id='s1_start', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_start: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_start'/1 status StepStatus.success: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] triggered: [], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_start/1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_s11_start(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_s11_start(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s1_s11_start/1.1 ] Triggering event ][ engine.__loop_trigger_request ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_s12_start(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_s12_start(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s1_s12_start/1.1 ] Triggering event ][ engine.__loop_trigger_request ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 2, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.1]: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.1]: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 2(s1_s11) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 2(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] Going to construct (process) and run task:
    Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ Task-s1_s11(1.1) ][ INFO    ][ [ Step s1_s11/1.1 ] Attempting to run ]
[ Task-s1_s11(1.1) ][ INFO    ][ [ Step s1_s11/1.1 ] Attempting to run ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] Starting: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] Starting: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ INFO    ][ doing what prog11 is doing ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 3(s1_s12) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 3(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] Going to construct (process) and run task:
    Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ Task-s1_s12(1.1) ][ INFO    ][ [ Step s1_s12/1.1 ] Attempting to run ]
[ Task-s1_s12(1.1) ][ INFO    ][ [ Step s1_s12/1.1 ] Attempting to run ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] Starting: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] Starting: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ INFO    ][ doing what prog12 is doing ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] Completed: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ DEBUG   ][ [ Step s1_s11/1.1 ] Completed: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.1) ][ INFO    ][ [ Step s1_s11/1.1 ] Completed, status: TaskStatus.success ]
[ Task-s1_s11(1.1) ][ INFO    ][ [ Step s1_s11/1.1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 2 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 3 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] applying result, process: <Process(Task-s1_s11(1.1), stopped)>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] joining ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] joined ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] applying task update to db
    Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=2, run_id='', step_id='s1_s11', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_s11: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.1 status StepStatus.success: [Event('s1_next')] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_next(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] Completed: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ DEBUG   ][ [ Step s1_s12/1.1 ] Completed: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.1) ][ INFO    ][ [ Step s1_s12/1.1 ] Completed, status: TaskStatus.success ]
[ Task-s1_s12(1.1) ][ INFO    ][ [ Step s1_s12/1.1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_next(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Triggered post task: 's1_next'[1.1] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] triggered: [('s1_next', '1.1')], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] applying result, process: <Process(Task-s1_s12(1.1), stopped)>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] joining ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] joined ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] applying task update to db
    Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=3, run_id='', step_id='s1_s12', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_s12: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.1 status StepStatus.success: [Event('s1_next')] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_next(1.1) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='4', run_id='', event_id='s1_next', sequence='1.1', recovery='0', created='2017-09-11 16:23:02.304656', acted='None')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Triggered post task: 's1_next'[1.1] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] triggered: [('s1_next', '1.1')], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 1, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.1]: Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.1]: Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 4 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 4(s1_next) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 4(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] Going to construct (invoke) and run task:
    Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ INFO    ][ [ Step s1_next/1.1 ] Attempting to run ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.1 ] Starting: Step( name(s1_next), func( Container(initial=False) ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.1 ] running Container(initial=False, eventor_task_sequence='1.1') ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs like: 1.%; state: EventorState.active, recovery: 0 ][ engine.count_todos_like ]
[ MainProcess ][ DEBUG   ][ DBAPI: count_tasks_like: tasks: ['s1_next/1.1'] ][ dbapi.count_tasks_like ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos_like ]
[ MainProcess ][ DEBUG   ][ [ Step s1/1 ] TODOs count '1': 1 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1/1.1 ] Trying to get next sequence ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Received NextIteration: 1  ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Triggering starter Event('s1_s11_start')/2 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Triggering starter Event('s1_s12_start')/2 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.1 ] Completed: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.1') ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ INFO    ][ [ Step s1_next/1.1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] applying result, process: <eventor.eventor_types.Invoke object at 0x1061c7320>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] applying task update to db
    Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=4, run_id='', step_id='s1_next', sequence='1.1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_next: None ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.1 status StepStatus.success: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] triggered: [], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_s11_start(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_s11_start(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s1_s11_start/1.2 ] Triggering event ][ engine.__loop_trigger_request ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_s12_start(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_s12_start(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s1_s12_start/1.2 ] Triggering event ][ engine.__loop_trigger_request ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 2, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.2]: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.2 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.2]: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.2 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 5(s1_s11) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 5(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.2 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] Going to construct (process) and run task:
    Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ Task-s1_s11(1.2) ][ INFO    ][ [ Step s1_s11/1.2 ] Attempting to run ]
[ Task-s1_s11(1.2) ][ INFO    ][ [ Step s1_s11/1.2 ] Attempting to run ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] Starting: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] Starting: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ INFO    ][ doing what prog11 is doing ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 6(s1_s12) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 6(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.2 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] Going to construct (process) and run task:
    Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ Task-s1_s12(1.2) ][ INFO    ][ [ Step s1_s12/1.2 ] Attempting to run ]
[ Task-s1_s12(1.2) ][ INFO    ][ [ Step s1_s12/1.2 ] Attempting to run ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] Starting: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] Starting: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ INFO    ][ doing what prog12 is doing ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 2 (triggers: 0, tasks: 2) ][ engine.count_todos ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] Completed: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ DEBUG   ][ [ Step s1_s11/1.2 ] Completed: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s11(1.2) ][ INFO    ][ [ Step s1_s11/1.2 ] Completed, status: TaskStatus.success ]
[ Task-s1_s11(1.2) ][ INFO    ][ [ Step s1_s11/1.2 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 5 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 6 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] applying result, process: <Process(Task-s1_s11(1.2), stopped)>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] joining ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] joined ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] applying task update to db
    Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=5, run_id='', step_id='s1_s11', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog11', created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_s11: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s11'/1.2 status StepStatus.success: [Event('s1_next')] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_next(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_next(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] Completed: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ DEBUG   ][ [ Step s1_s12/1.2 ] Completed: Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ][ step.__call__ ]
[ Task-s1_s12(1.2) ][ INFO    ][ [ Step s1_s12/1.2 ] Completed, status: TaskStatus.success ]
[ Task-s1_s12(1.2) ][ INFO    ][ [ Step s1_s12/1.2 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Triggered post task: 's1_next'[1.2] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] triggered: [('s1_next', '1.2')], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s11/1.2 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] applying result, process: <Process(Task-s1_s12(1.2), stopped)>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] joining ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] joined ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] applying task update to db
    Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=6, run_id='', step_id='s1_s12', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog12', created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_s12: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_s12'/1.2 status StepStatus.success: [Event('s1_next')] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_next(1.2) ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='7', run_id='', event_id='s1_next', sequence='1.2', recovery='0', created='2017-09-11 16:23:03.589018', acted='None')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Triggered post task: 's1_next'[1.2] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] triggered: [('s1_next', '1.2')], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_s12/1.2 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 1, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.2]: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.1') ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.2 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1.2]: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.1') ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.2 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.1') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 7 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 7(s1_next) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 7(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.2 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] Going to construct (invoke) and run task:
    Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ INFO    ][ [ Step s1_next/1.2 ] Attempting to run ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.2 ] Starting: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.1') ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.2 ] running Container(initial=False, eventor_task_sequence='1.2', eventor=Steps( name(  ) events( Event('s1_start')
Event('s1_success')
Event('s1_end')
Event('s2_start', ((s1_success)))
Event('s2_complete')
Event('s1_s11_start')
Event('s1_s12_start')
Event('s1_s12_complete')
Event('s1_s11_complete')
Event('s1_next') ) steps( Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)}))
Step( name(s1_start), func( Container(initial=True, eventor_task_sequence='1') ), triggers({}))
Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({}))
Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.2') ), triggers({}))
Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]}))
Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})) ) assocs( [Assoc(Event('s1_end'), Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})))]
[Assoc(Event('s1_start'), Step( name(s1_start), func( Container(initial=True, eventor_task_sequence='1') ), triggers({})))]
[Assoc(Event('s2_start', ((s1_success))), Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})))]
[Assoc(Event('s1_next'), Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.2') ), triggers({}))), Assoc(Event('s1_next'), Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.2') ), triggers({})))]
[Assoc(Event('s1_s11_start'), Step( name(s1_s11), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog11') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})))]
[Assoc(Event('s1_s12_start'), Step( name(s1_s12), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog12') ), triggers({<StepStatus.success: 5>: [Event('s1_next')],
 <StepStatus.failure: 6>: [Event('s1_next')]})))] )  )) ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs like: 1.%; state: EventorState.active, recovery: 0 ][ engine.count_todos_like ]
[ MainProcess ][ DEBUG   ][ DBAPI: count_tasks_like: tasks: ['s1_next/1.2'] ][ dbapi.count_tasks_like ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos_like ]
[ MainProcess ][ DEBUG   ][ [ Step s1/1 ] TODOs count '1': 1 ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1/1.2 ] Trying to get next sequence ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Received StopIteration  ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Enders: ['s1_s12', 's1_s11'] ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ DBAPI: get_task_status: task: {} ][ dbapi.get_task_status ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Container step status for triggering: success ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1 ] Triggering ender: Event('s1_end') ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_next/1.2 ] Completed: Step( name(s1_next), func( Container(initial=False, eventor_task_sequence='1.2') ), triggers({})) ][ step.__call__ ]
[ MainProcess ][ INFO    ][ [ Step s1_next/1.2 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] applying result, process: <eventor.eventor_types.Invoke object at 0x1057a1dd8>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] applying task update to db
    Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=7, run_id='', step_id='s1_next', sequence='1.2', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_next: None ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_next'/1.2 status StepStatus.success: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] triggered: [], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_next/1.2 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_end ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_end ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s1_end/1 ] Triggering event ][ engine.__loop_trigger_request ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 1, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1]: Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_end'/1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = False
    {'s1_start': True, 's1_end': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 8 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 8(s1_end) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 8(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_end'/1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] Going to construct (invoke) and run task:
    Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ INFO    ][ [ Step s1_end/1 ] Attempting to run ]
[ MainProcess ][ DEBUG   ][ [ Step s1_end/1 ] Starting: Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})) ][ step.__call__ ]
[ MainProcess ][ DEBUG   ][ [ Step s1_end/1 ] Completed: Step( name(s1_end), func( NoneType() ), triggers({<StepStatus.success: 5>: (Event('s1_success'),),
 <StepStatus.failure: 6>: (Event('s1_end'),)})) ][ step.__call__ ]
[ MainProcess ][ INFO    ][ [ Step s1_end/1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Invoke result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] applying result, process: <eventor.eventor_types.Invoke object at 0x10605ccf8>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] applying task update to db
    Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=8, run_id='', step_id='s1_end', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result=True, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s1_end: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's1_end'/1 status StepStatus.success: (Event('s1_success'),) ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s1_success ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s1_success ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Triggered post task: 's1_success'[1] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] triggered: [('s1_success', '1')], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s1_end/1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 1, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: adding event trigger s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 1, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Processing event association step [1]: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__assoc_loop ]
[ MainProcess ][ DEBUG   ][ DBAPI: add_task_if_not_exists: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.add_task_if_not_exists ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's2'/1 status StepStatus.ready: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.ready: 1>, result=None, created=datetime.datetime(), updated=None), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ No delay, initiate task: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Initiating task: 9(s2) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: updating task status: 9(TaskStatus.active) ][ dbapi.update_task_status ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's2'/1 status StepStatus.active: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] Going to construct (process) and run task:
    Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=None, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__initiate_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: Using DB config: {'workdir': '/tmp', 'logdir': '/var/log/eventor', 'task_construct': 'process', 'max_concurrent': -1, 'stop_on_exception': True, 'sleep_between_loops': 0.05, 'sequence_arg_name': None, 'day_to_keep_db': 5, 'remote_method': 'ssh', 'PATH': '/usr/bin:/bin:/usr/sbin:/sbin', 'PYTHONPATH': '/Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc/pydev_sitecustomize:/private/var/acrisel/sand/sequent/sequent/sequent:/private/var/acrisel/sand/eventor/eventor/eventor:/usr/local/share/virtualenvs/sequent/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/lib-dynload:/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6:/usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages', 'APP_ICON_1200': '../Resources/Eclipse.icns', 'SHELL': '/bin/bash', 'PYDEV_CONSOLE_ENCODING': 'utf-8', 'PYTHONIOENCODING': 'utf-8', 'USER': 'arnon', 'TMPDIR': '/var/folders/fy/h9fxhkw53dj3cgsy7h4x50j40000gn/T/', 'SSH_AUTH_SOCK': '/private/tmp/com.apple.launchd.V2ZPS7Lo1e/Listeners', 'DISPLAY': '/private/tmp/com.apple.launchd.JavUMLj4C9/org.macosforge.xquartz:0', 'PYTHONUNBUFFERED': '1', 'XPC_FLAGS': '0x0', '__CF_USER_TEXT_ENCODING': '0x1F5:0x0:0x0', 'Apple_PubSub_Socket_Render': '/private/tmp/com.apple.launchd.oQtc8D9zMw/Render', 'APP_ICON_868': '../Resources/Eclipse.icns', 'LOGNAME': 'arnon', 'PYDEV_COMPLETER_PYTHONPATH': '/Applications/eclipse/java-oxygen/Eclipse.app/Contents/Eclipse/../../../../../../Users/arnon/.p2/pool/plugins/org.python.pydev_5.9.2.201708151115/pysrc', 'XPC_SERVICE_NAME': 'org.eclipse.platform.ide.45496.01899412-257C-40D2-81FE-6C8E26653332', 'HOME': '/Users/arnon', 'DATABASES': {'default': {'dialect': 'sqlite', 'query': {'cache': 'shared'}}, 'sqfile00': {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'}, 'pgdb1': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'localhost', 'port': 5433, 'database': 'pyground', 'schema': 'play'}, 'pgdb2': {'dialect': 'postgresql', 'drivername': 'psycopg2', 'username': 'arnon', 'password': 'arnon42', 'host': 'ubuntud01', 'port': 5432, 'database': 'pyground', 'schema': 'play'}}} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ DBAPI: SQLAlchemyConf: {'dialect': 'sqlite', 'database': '/var/acrisel/sand/sequent/sequent/sequent/examples/example00.db'} ][ dbapi.get_sqlalchemy_conf ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Attempting to run ]
[ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Attempting to run ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] Starting: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ step.__call__ ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] Starting: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ step.__call__ ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ][ step.__call__ ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] running prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ][ step.__call__ ]
[ Task-s2(1)  ][ INFO    ][ doing what prog2 is doing ]
[ MainProcess ][ DEBUG   ][ specialize map: <function sqlite_url at 0x10549bd08> ][ sqladburl.get_url ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.update: 2>, value=Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 1 (triggers: 0, tasks: 1) ][ engine.count_todos ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] Completed: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ step.__call__ ]
[ Task-s2(1)  ][ DEBUG   ][ [ Step s2/1 ] Completed: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ step.__call__ ]
[ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Completed, status: TaskStatus.success ]
[ Task-s2(1)  ][ INFO    ][ [ Step s2/1 ] Completed, status: TaskStatus.success ]
[ MainProcess ][ DEBUG   ][ Going to fetch delays: : recovery: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Count of active delays: 0 ][ engine.__loop_delay ]
[ MainProcess ][ DEBUG   ][ Going to fetch events: : recovery: 0 ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1 ] Eval expr: ((s1_success)) = True
    {'s1_start': True, 's1_end': True, 's1_success': True, 's2_start': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ DBAPI: checking if event trigger do not exist: s2_start ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ DBAPI: trigger already in db, returning True; <Trigger(id='10', run_id='', event_id='s2_start', sequence='1', recovery='0', created='2017-09-11 16:23:03.899147', acted='2017-09-11 16:23:03.980619')> ][ dbapi.add_trigger_if_not_exists ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1] Triggered event (Event('s2_start', ((s1_success))) ):
    {} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.1 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ [ Event s2_start/1.2 ] Eval expr: ((s1_success)) = False
    {'s1_s11_start': True, 's1_s12_start': True, 's1_next': True} ][ engine.__loop_event ]
[ MainProcess ][ DEBUG   ][ Going to fetch tasks: : recovery: 0 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ DBAPI: task_iter: task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.get_task_iter ]
[ MainProcess ][ DEBUG   ][ Evaluating task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.active: 4>, result=None, created=datetime.datetime(), updated=datetime.datetime()), step: Step( name(s2), func( prog(flow=Step( path(), step({'s1': Step( path(s1), step({'s1_s11': Step( path(s1_s11), step({}),), 's1_s12': Step( path(s1_s12), step({}),)}),), 's2': Step( path(s2), step({}),)}),), progname='prog2') ), triggers({})) ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Task allocated resource: 9 ][ engine.__loop_task ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Going to play Process result: TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog2', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Result collected: 
    TaskAdminMsg(msg_type=<TaskAdminMsgType.result: 1>, value=Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog2', created=datetime.datetime(), updated=datetime.datetime())) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Received Task(Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog2', created=datetime.datetime(), updated=datetime.datetime())) to play (istask: True) ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] applying result, process: <Process(Task-s2(1), stopped)>, is_allive: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] joining ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] joined ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] deleted ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] applying task update to db
    Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog2', created=datetime.datetime(), updated=datetime.datetime()) ][ engine.__apply_task_result ]
[ MainProcess ][ DEBUG   ][ DBAPI: update_task: Task(id_=9, run_id='', step_id='s2', sequence='1', host='arnon-mbp', recovery=0, pid=, status=<TaskStatus.success: 5>, result='prog2', created=datetime.datetime(), updated=datetime.datetime()) ][ dbapi.update_task ]
[ MainProcess ][ DEBUG   ][ Releasing task resources s2: [] ][ engine.__release_task_resources ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Acquiring Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_acquire ]
[ MainProcess ][ DEBUG   ][ putting back request: [] ][ virtual_resource_pool.put_requested ]
[ MainProcess ][ DEBUG   ][ ResourcePoolRequestors Releasing Lock; /usr/local/share/virtualenvs/sequent/lib/python3.6/site-packages/acris/idioms/virtual_resource_pool.py.put_requested ][ virtual_resource_pool.__sync_release ]
[ MainProcess ][ DEBUG   ][ Found triggers for task 's2'/1 status StepStatus.success: [] ][ engine.__triggers_at_task_change ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] triggered: [], stop_on_exception: True, task.status: <TaskStatus.success: 5> ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ [ Task s2/1 ] shutdown: False ][ engine.__play_result ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to read result queue ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Collected and played result: True, thread: True, process: True, invoke: True ][ engine.__collect_results ]
[ MainProcess ][ DEBUG   ][ Trying to receive resources ][ engine.__loop_awating_resource_allocation ]
[ MainProcess ][ DEBUG   ][ Loop once result: True  ][ engine.loop_once ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 0 (triggers: 0, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Counting TODOs; state: EventorState.active, recovery: 0 ][ engine.count_todos ]
[ MainProcess ][ DEBUG   ][ [ Step / ] Total TODOs: 0 (triggers: 0, tasks: 0) ][ engine.count_todos ]
[ MainProcess ][ INFO    ][ Processing finished with: success ]
